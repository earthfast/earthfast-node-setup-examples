services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./webroot:/var/www/certbot
    environment:
      - SERVER_NAME=${SERVER_NAME}
      - SETUP_SSL=${SETUP_SSL:-false}
    command: >
      /bin/sh -c "
      echo '=== Starting nginx setup ===';
      
      # Clean SERVER_NAME and store it
      echo \"${SERVER_NAME}\" | sed 's/\\/*$//' > /tmp/server_name;
      SERVER_NAME_VALUE=\$(cat /tmp/server_name);
      echo \"Using server name: \$SERVER_NAME_VALUE\";
      
      echo 'Removing default config...';
      rm -f /etc/nginx/conf.d/*.conf;
      
      echo 'Writing new configuration...';
      {
        echo 'server_names_hash_bucket_size 128;'
        echo ''
        echo 'server {'
        echo '    listen 80;'
        echo '    listen [::]:80;'
        echo "    server_name \$SERVER_NAME_VALUE;"
        echo ''
        echo '    location /.well-known/acme-challenge/ {'
        echo '        root /var/www/certbot;'
        echo '    }'
        
        if [ '${SETUP_SSL}' = 'true' ]; then
          echo ''
          echo '    location / {'
          echo '        return 301 https://$host$request_uri;'
          echo '    }'
          echo '}'
          
          if [ -f /etc/letsencrypt/live/\$SERVER_NAME_VALUE/fullchain.pem ]; then
            echo ''
            echo 'server {'
            echo '    listen 443 ssl;'
            echo '    listen [::]:443 ssl;'
            echo "    server_name \$SERVER_NAME_VALUE;"
            echo ''
            echo "    ssl_certificate /etc/letsencrypt/live/\$SERVER_NAME_VALUE/fullchain.pem;"
            echo "    ssl_certificate_key /etc/letsencrypt/live/\$SERVER_NAME_VALUE/privkey.pem;"
            echo ''
            echo '    location / {'
            echo '        proxy_pass http://content-node:5000;'
            echo '        proxy_set_header X-Forwarded-For $remote_addr;'
            echo '        proxy_set_header Host $http_host;'
            echo '    }'
            echo '}'
          else
            echo 'SSL certificates not found, using HTTP only';
          fi
        else
          echo ''
          echo '    location / {'
          echo '        proxy_pass http://content-node:5000;'
          echo '        proxy_set_header X-Forwarded-For $remote_addr;'
          echo '        proxy_set_header Host $http_host;'
          echo '    }'
          echo '}'
        fi
      } > /etc/nginx/conf.d/default.conf

      echo '=== Generated nginx configuration ==='
      cat /etc/nginx/conf.d/default.conf
      
      echo '=== Starting nginx ==='
      nginx -t && nginx -g 'daemon off;' || (echo '=== Nginx configuration test failed ==='; cat /var/log/nginx/error.log; exit 1)"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  certbot:
    image: certbot/certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./webroot:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email --force-renewal -d ${SERVER_NAME}
    depends_on:
      - nginx
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  content-node:
    image: earthfast/content-node:latest
    environment:
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - DATABASE_DIR=/data/database
      - ETH_RPC_ENDPOINT=${RPC_URL}
      - HOSTING_CACHE_DIR=/data/hosting_cache
      - HTTP_PORT=5000
      - NODE_ID=${NODE_ID}
    volumes:
      - ${DATABASE_DIR}:/data/database
      - ${HOSTING_CACHE_DIR}:/data/hosting_cache
    ports:
      - "5000:5000"
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 60 --cleanup
    restart: unless-stopped

volumes:
  letsencrypt:
