services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./webroot:/var/www/certbot
    environment:
      - SERVER_NAME=${SERVER_NAME}
      - SETUP_SSL=${SETUP_SSL:-false}
    command: >
      /bin/sh -c "
      echo '=== Starting nginx setup ===';
      
      # Clean SERVER_NAME and export it
      export CLEAN_SERVER_NAME=\$(echo \"${SERVER_NAME}\" | sed 's/\\/*$//');
      echo \"Using server name: \$CLEAN_SERVER_NAME\";
      
      echo 'Removing default config...';
      rm -f /etc/nginx/conf.d/*.conf;
      
      echo 'Writing new configuration...';
      # Create base HTTP config
      cat > /etc/nginx/templates/default.conf.template << 'EOF'
      server_names_hash_bucket_size 128;

      server {
          listen 80;
          listen [::]:80;
          server_name ${CLEAN_SERVER_NAME};
          
          location /.well-known/acme-challenge/ {
              root /var/www/certbot;
          }
      EOF

      if [ '${SETUP_SSL}' = 'true' ]; then
        # Add SSL redirect
        cat >> /etc/nginx/templates/default.conf.template << 'EOF'
          
          location / {
              return 301 https://$host$request_uri;
          }
      }

      # Close HTTP server block
      cat >> /etc/nginx/templates/default.conf.template << 'EOF'
      }
      EOF

        # Add HTTPS server if certs exist
        if [ -f /etc/letsencrypt/live/\$CLEAN_SERVER_NAME/fullchain.pem ]; then
          cat >> /etc/nginx/templates/default.conf.template << 'EOF'

      server {
          listen 443 ssl;
          listen [::]:443 ssl;
          server_name ${CLEAN_SERVER_NAME};

          ssl_certificate /etc/letsencrypt/live/${CLEAN_SERVER_NAME}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/${CLEAN_SERVER_NAME}/privkey.pem;

          location / {
              proxy_pass http://content-node:5000;
              proxy_set_header X-Forwarded-For $remote_addr;
              proxy_set_header Host $http_host;
          }
      }
      EOF
        else
          echo 'SSL certificates not found, using HTTP only';
        fi
      else
        # Add HTTP proxy if SSL is not enabled
        cat >> /etc/nginx/templates/default.conf.template << 'EOF'
          
          location / {
              proxy_pass http://content-node:5000;
              proxy_set_header X-Forwarded-For $remote_addr;
              proxy_set_header Host $http_host;
          }
      }
      EOF
      fi

      echo '=== Processing template ===';
      envsubst '${CLEAN_SERVER_NAME}' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf;

      echo '=== Generated nginx configuration ===';
      cat /etc/nginx/conf.d/default.conf;
      
      echo '=== Starting nginx ===';
      nginx -t && nginx -g 'daemon off;' || (echo '=== Nginx configuration test failed ==='; cat /var/log/nginx/error.log; exit 1)"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  certbot:
    image: certbot/certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./webroot:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email --force-renewal -d ${SERVER_NAME}
    depends_on:
      - nginx
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  content-node:
    image: earthfast/content-node:latest
    environment:
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - DATABASE_DIR=/data/database
      - ETH_RPC_ENDPOINT=${RPC_URL}
      - HOSTING_CACHE_DIR=/data/hosting_cache
      - HTTP_PORT=5000
      - NODE_ID=${NODE_ID}
    volumes:
      - ${DATABASE_DIR}:/data/database
      - ${HOSTING_CACHE_DIR}:/data/hosting_cache
    ports:
      - "5000:5000"
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 60 --cleanup
    restart: unless-stopped

volumes:
  letsencrypt:
