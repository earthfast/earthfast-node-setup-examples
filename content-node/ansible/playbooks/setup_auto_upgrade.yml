- name: Setup automatic git pull cron job
  hosts: all
  become: true
  vars:
    base_path: "/home/ubuntu/node-operator-tooling"
    application_path: "/home/ubuntu/node-operator-tooling/content-node/docker-compose"
    git_repo_url: "https://github.com/earthfast/node-operator-tooling"
    cron_schedule: "0 */4 * * *"
  tasks:
    - name: Backup .env file if it exists
      become_user: ubuntu
      shell: |
        if [ -f "{{ application_path }}/.env" ]; then
          cp "{{ application_path }}/.env" /tmp/.env.backup
        fi
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Remove existing directory
      file:
        path: "{{ base_path }}"
        state: absent

    - name: Create base directory
      file:
        path: "{{ base_path }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Clone repository fresh
      become_user: ubuntu
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ base_path }}"
        force: yes
        version: main

    - name: Ensure application directory exists
      file:
        path: "{{ application_path }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Restore .env file if it existed
      become_user: ubuntu
      shell: |
        if [ -f "/tmp/.env.backup" ]; then
          cp /tmp/.env.backup "{{ application_path }}/.env"
          rm /tmp/.env.backup
        fi
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Create auto-upgrade script
      copy:
        dest: /usr/local/bin/git-auto-upgrade.sh
        mode: '0755'
        owner: ubuntu
        group: ubuntu
        content: |
          #!/bin/bash
          
          # Enable error logging and debugging
          set -ex
          
          # Log start time
          echo "=== Starting auto-upgrade at $(date) ===" >> /var/log/earthfast/git-auto-upgrade.log
          
          # Export PATH
          export PATH=$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
          
          # Change to base directory for git operations
          cd {{ base_path }}
          
          # Ensure Git directory has correct permissions
          sudo find .git -type d -exec chmod 777 {} \;
          sudo find .git -type f -exec chmod 666 {} \;
          
          # Backup .env if it exists
          if [ -f "{{ application_path }}/.env" ]; then
            cp "{{ application_path }}/.env" /tmp/.env.backup
          fi
          
          # Clean and reset repository
          git reset --hard HEAD
          git clean -fd
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Restore .env if it existed
          if [ -f /tmp/.env.backup ]; then
            cp /tmp/.env.backup "{{ application_path }}/.env"
            rm /tmp/.env.backup
          fi
          
          # Change to application directory for docker operations
          cd {{ application_path }}
          
          # Verify docker-compose file exists
          if [ ! -f "docker-compose.yml" ] && [ ! -f "docker-compose.yaml" ]; then
            echo "Error: No docker-compose file found!"
            exit 1
          fi
          
          # Determine which compose file to use
          COMPOSE_FILE=""
          if [ -f "docker-compose.yml" ]; then
            COMPOSE_FILE="docker-compose.yml"
          elif [ -f "docker-compose.yaml" ]; then
            COMPOSE_FILE="docker-compose.yaml"
          fi
          
          # Docker operations with explicit compose file
          echo "Using Docker Compose file: $COMPOSE_FILE"
          
          # Stop existing containers
          docker compose -f "$COMPOSE_FILE" down --remove-orphans || true
          
          # Clean up containers
          containers=$(docker ps -a --filter "name=docker-compose-" -q)
          if [ ! -z "$containers" ]; then
            docker rm -f $containers || true
          fi
          
          # Clean up networks
          docker network prune -f || true
          
          # Start services with explicit compose file
          docker compose -f "$COMPOSE_FILE" up -d
          
          echo "=== Completed auto-upgrade at $(date) ===" >> /var/log/earthfast/git-auto-upgrade.log

    - name: Set up cron job for auto-upgrade
      cron:
        name: "Git auto-upgrade"
        minute: "{{ cron_schedule.split(' ')[0] }}"
        hour: "{{ cron_schedule.split(' ')[1] }}"
        day: "{{ cron_schedule.split(' ')[2] }}"
        month: "{{ cron_schedule.split(' ')[3] }}"
        weekday: "{{ cron_schedule.split(' ')[4] }}"
        job: "/usr/local/bin/git-auto-upgrade.sh >> /var/log/earthfast/git-auto-upgrade.log 2>&1"
        user: ubuntu

    - name: Create logrotate configuration
      copy:
        dest: /etc/logrotate.d/git-auto-upgrade
        mode: '0644'
        content: |
          /var/log/earthfast/git-auto-upgrade.log {
            rotate 7
            daily
            compress
            missingok
            notifempty
            create 0644 ubuntu ubuntu
          }

    - name: Test script execution
      become_user: ubuntu
      shell: /usr/local/bin/git-auto-upgrade.sh
      register: test_result
      ignore_errors: yes

    - name: Display test result
      debug:
        var: test_result

    - name: Verify cron job
      shell: crontab -l -u ubuntu
      register: crontab_content

    - name: Display cron configuration
      debug:
        var: crontab_content.stdout_lines
